#!/usr/bin/env python
#
# asciify toy application for turning image/animation/video to ASCII on console
#
# (c) Copyright 2016 Jimmy Shen
#

import argparse
import fcntl
import imageio
import numpy as np
import os
import scipy.ndimage
import struct
import sys
import termios
import time

def terminal_size():
    """Code I stole to get terminal size"""
    h, w, hp, wp = struct.unpack('HHHH',
        fcntl.ioctl(0, termios.TIOCGWINSZ,
        struct.pack('HHHH', 0, 0, 0, 0)))
    return w, h


def main_loop(filename, delay=0.05):
    frames = []
    scale = " .:-=+*#%@"
    reader = imageio.read(filename)
    termw, termh = terminal_size()

    while True:
        for data in reader:
            start = time.time()
            data = np.mean(data, axis=2, dtype=np.float64)
            data /= 255.0
            data *= len(scale)

            ph, pw = data.shape
            sh = (float(termh) / ph)
            sw = (float(termw) / pw)

            data = scipy.ndimage.zoom(data, [sh, sw]).astype(np.int)

            for row in data:
                for idx in row:
                    idx = min(idx, len(scale) - 1)      # my math broke somewhere...
                    sys.stdout.write(scale[idx])

                sys.stdout.write('\n')

            sys.stdout.flush()

            # dejitter?
            elapsed = time.time() - start
            if elapsed < delay:
                time.sleep(delay - elapsed)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='asciify')
    parser.add_argument('-d', default='50', type=float, help='delay in milliseconds (default: 50)')

    subparsers = parser.add_subparsers()

    load_cmd = subparsers.add_parser('load', help='loads and loops a file')
    load_cmd.add_argument('filename', help='image / animation / video to load')
    load_cmd.set_defaults(mode='load')

    cam_cmd = subparsers.add_parser('cam', help='streams from webcam')
    cam_cmd.set_defaults(mode='cam')

    help_cmd = subparsers.add_parser('help', help='show help')
    help_cmd.set_defaults(mode='help')

    args = parser.parse_args()

    delay = abs(args.d) / 1000.0

    if args.mode == 'cam':
        main_loop('<video0>', delay)
    elif args.mode == 'load':
        main_loop(args.filename, delay)
    elif args.mode == 'help':
        parser.print_help()
    else:
        sys.exit('unsupported mode')

